// This is your Prisma schema file,
// learn more about it in the docs https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum ReportStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ValuationStatus {
  DRAFT
  SENT
  APPROVED
  REJECTED
  CANCELLED
}

model Plan {
  id           Int       @id @default(autoincrement())
  name         String
  slug         String    @unique
  price        Decimal   @db.Decimal(10, 2)
  period       String
  description  String
  features     Json
  icon         String
  active       Boolean   @default(true)
  subscribers  Int       @default(0)
  revenue      Decimal   @default(0) @db.Decimal(12, 2)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Service {
  id             Int              @id @default(autoincrement())
  code           String           @unique
  name           String
  description    String?
  unit           String
  unitPriceUsd   Decimal          @db.Decimal(12, 2)
  unitPriceLocal Decimal?         @db.Decimal(12, 2)
  localCurrency  String?          @default("VES")
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  valuationItems ValuationItem[]
}

model Valuation {
  id              Int               @id @default(autoincrement())
  code            String            @unique
  title           String
  status          ValuationStatus   @default(DRAFT)
  customerId      Int?
  customerName    String?
  customerContact String?
  customerCode    String?
  customerAddress String?
  customerEmail   String?
  customerPhone   String?
  issueDate       DateTime
  dueDate         DateTime?
  wellCode        String?
  drillCode       String?
  scope           String?
  workOrderNumber String?
  referenceNumber String?
  paymentTerms    String?
  currency        String           @default("USD")
  localCurrency   String?          @default("VES")
  exchangeRate    Decimal?         @db.Decimal(12, 4)
  subtotalUsd     Decimal          @db.Decimal(14, 2)
  subtotalLocal   Decimal?         @db.Decimal(14, 2)
  taxRate         Decimal?         @db.Decimal(5, 2)
  taxUsd          Decimal?         @db.Decimal(14, 2)
  taxLocal        Decimal?         @db.Decimal(14, 2)
  totalUsd        Decimal          @db.Decimal(14, 2)
  totalLocal      Decimal?         @db.Decimal(14, 2)
  notes           String?
  terms           String?
  preparedBy      String?
  approvedBy      String?
  receivedBy      String?
  receivedId      String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  items           ValuationItem[]
  customer        Customer?         @relation(fields: [customerId], references: [id])

  @@index([issueDate])
  @@index([status])
}

model ValuationItem {
  id             Int        @id @default(autoincrement())
  valuationId    Int
  serviceId      Int?
  description    String
  unit           String
  quantity       Decimal    @db.Decimal(12, 2)
  unitPriceUsd   Decimal    @db.Decimal(14, 2)
  unitPriceLocal Decimal?   @db.Decimal(14, 2)
  totalUsd       Decimal    @db.Decimal(14, 2)
  totalLocal     Decimal?   @db.Decimal(14, 2)
  orderIndex     Int        @default(0)
  dailyBreakdown Json?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  valuation      Valuation  @relation(fields: [valuationId], references: [id], onDelete: Cascade)
  service        Service?   @relation(fields: [serviceId], references: [id])

  @@index([valuationId])
  @@index([serviceId])
}



model Vessel {
  id           Int       @id @default(autoincrement())
  name         String
  registration String?   @unique
  vesselType   String?
  flag         String?
  owner        String?
  notes        String?
  photoUrl     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  reports      Report[]
  documents    VesselDocument[]
}



model Captain {
  id           Int       @id @default(autoincrement())
  name         String
  cedula       String    @unique
  phone        String?
  photoUrl     String?
  signatureUrl String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  reports      Report[]
  teams        TeamCaptain[]
  userId       Int?      @unique
  user         User?     @relation(fields: [userId], references: [id])
  documents    CaptainDocument[]
}


model CaptainDocument {
  id         Int      @id @default(autoincrement())
  captainId  Int
  title      String
  fileUrl    String
  fileType   String?
  fileKey    String?
  uploadedAt DateTime @default(now())
  captain    Captain @relation(fields: [captainId], references: [id], onDelete: Cascade)

  @@index([captainId])
}


model VesselDocument {
  id         Int      @id @default(autoincrement())
  vesselId   Int
  title      String
  fileUrl    String
  fileType   String?
  fileKey    String?
  uploadedAt DateTime @default(now())
  vessel     Vessel  @relation(fields: [vesselId], references: [id], onDelete: Cascade)

  @@index([vesselId])
}


model Mariner {
  id           Int       @id @default(autoincrement())
  name         String
  cedula       String    @unique
  phone        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  teamAssignments TeamMariner[]
}


model Customer {
  id           Int       @id @default(autoincrement())
  name         String
  cedula       String    @unique
  phone        String?
  photoUrl     String?
  signatureUrl String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  reports      Report[]
  valuations   Valuation[]
}



model Role {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String   @unique
  description String?
  permissions Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]

  @@unique([name])
}


model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  password     String
  firstName    String
  lastName     String
  roleKey      String   @default("user") @map("role")
  role         Role     @relation(fields: [roleKey], references: [slug], onUpdate: Cascade)
  plan         String   @default("Básico")
  status       String   @default("active")
  devices      Int      @default(0)
  lastLogin    DateTime?
  avatarUrl    String?
  phoneNumber  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  twoFactorCodes TwoFactorCode[]
  twoFactorCode String?  @unique @db.Char(6)
  captain       Captain?
}

/// Codes temporales para verificación en dos pasos
model TwoFactorCode {
  id        Int      @id @default(autoincrement())
  codeHash  String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int

  @@index([userId])
  @@index([expiresAt])
}

model Report {
  id                  Int    @id @default(autoincrement())
  vesselId            Int?
  vesselName          String
  captainName         String
  captainId           Int?
  serviceDate         DateTime
  serviceStart        DateTime
  serviceEnd          DateTime
  clientName          String
  customerId          Int?
  patronName          String
  motoristaName       String
  cookName            String
  sailorName          String
  companySupervisorName String?
  clientSupervisorName  String?
  latitude            Float?
  longitude           Float?
  totalServiceMinutes Int    @default(0)
  status              ReportStatus @default(PENDING)
  supportImageUrl     String?
  notes               String?
  createdByUserId     Int?
  createdByUserFullName String?
  createdByUserEmail  String?
  approvedByUserId    Int?
  approvedByUserFullName String?
  approvedByUserEmail String?
  approvedAt          DateTime?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  activities          ReportActivity[]
  captain             Captain? @relation(fields: [captainId], references: [id])
  customer            Customer? @relation(fields: [customerId], references: [id])
  vessel              Vessel? @relation(fields: [vesselId], references: [id])
  teamId              Int?
  team                Team?    @relation(fields: [teamId], references: [id])

  @@index([vesselName])
  @@index([serviceDate])
  @@index([vesselId])
  @@index([teamId])
}

model ReportActivity {
  id          Int      @id @default(autoincrement())
  reportId    Int
  description String
  startedAt   DateTime
  endedAt     DateTime
  imageUrl    String?
  latitude    Float?
  longitude   Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  report Report @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([reportId])
  @@index([startedAt])
}

model Team {
  id                         Int            @id @default(autoincrement())
  name                       String
  description                String?
  defaultCompanySupervisorName String?
  defaultClientSupervisorName  String?
  isActive                   Boolean        @default(true)
  deactivatedAt              DateTime?
  createdAt                  DateTime       @default(now())
  updatedAt                  DateTime       @updatedAt
  captains                   TeamCaptain[]
  mariners                   TeamMariner[]
  reports                    Report[]
}

model TeamCaptain {
  id         Int      @id @default(autoincrement())
  teamId     Int
  captainId  Int
  isPrimary  Boolean  @default(false)
  createdAt  DateTime @default(now())
  team       Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  captain    Captain  @relation(fields: [captainId], references: [id], onDelete: Cascade)

  @@unique([teamId, captainId])
  @@index([captainId])
}

enum TeamCrewRole {
  PATRON
  MOTORISTA
  COCINERO
  MARINERO
}

model TeamMariner {
  id         Int          @id @default(autoincrement())
  teamId     Int
  marinerId  Int
  role       TeamCrewRole
  orderIndex Int          @default(0)
  createdAt  DateTime     @default(now())
  team       Team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
  mariner    Mariner      @relation(fields: [marinerId], references: [id], onDelete: Cascade)


  @@unique([teamId, marinerId])
  @@index([marinerId])
  @@index([teamId, role])
}

model BrandingSetting {
  id             Int      @id @default(autoincrement())
  sidebarLogoUrl String?
  pdfLogoUrl     String?
  legalName      String?
  taxId          String?
  address        String?
  phone          String?
  primaryColor   String   @default("#0039B7")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}